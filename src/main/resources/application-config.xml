<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx.xsd
                        http://www.springframework.org/schema/task
                        http://www.springframework.org/schema/task/spring-task.xsd
">
    <!--1，注解扫描-->
    <task:annotation-driven/>
    <context:component-scan base-package="com.zking"></context:component-scan>

    <!--2，开启注解驱动-->
    <mvc:annotation-driven/>

    <!--3,处理静态资源文件-->
    <mvc:default-servlet-handler/>

    <!--4,加载外部db.properties-->
    <context:property-placeholder location="classpath*:db.properties,classpath*:redis.properties"></context:property-placeholder>

    <!--5,配置数据库连接池(c3p0)-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!--5.1,配置数据源参数-->
        <property name="jdbcUrl" value="${db.url}"></property>
        <property name="driverClass" value="${db.driverClass}"></property>
        <property name="user" value="${db.username}"></property>
        <property name="password" value="${db.pwd}"></property>
        <!--5.2，配置连接池参数-->
        <property name="initialPoolSize" value="${pool.initSize}"></property>
        <property name="maxPoolSize" value="${pool.maxSize}"></property>
    </bean>

    <!--5,配置数据库连接池 druid-->
    <!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        &lt;!&ndash; 数据库基本信息配置&ndash;&gt;
        <property name="driverClassName" value="${db.driverClass}" />
        <property name="url" value="${db.url}" />
        <property name="username" value="${db.username}" />
        <property name="password" value="${db.pwd}" />
        <property name="filters" value="${db.filters}" />
        &lt;!&ndash; 最大并发连接数 &ndash;&gt;
        <property name="maxActive" value="${druid.maxActive}" />
        &lt;!&ndash; 初始化连接数量 &ndash;&gt;
        <property name="initialSize" value="${druid.initialSize}" />
        &lt;!&ndash; 最小空闲连接数 &ndash;&gt;
        <property name="minIdle" value="${druid.minIdle}" />
        &lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;
        <property name="maxWait" value="${druid.maxWait}" />

    </bean>-->

    <!--6，配置SqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--6.1,引入数据源-->
        <property name="dataSource" ref="dataSource"></property>

        <!--6.2 加载映射文件-->
        <property name="mapperLocations" value="classpath*:mapper/*.xml"></property>
        
        <!--6.3 设置别名-->
        <property name="typeAliasesPackage" value="com.zking.model"></property>
    </bean>

    <!--7,扫描mapper：向com.zking.dao层映射SqlSessionFactory-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--向com.zking.dao中的接口注入sqlSession实例，这样接口可以直接使用实例-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <property name="basePackage" value="com.zking.dao"></property>
    </bean>

    <!--8,开启Spring事务管理
    在service的impl中可以使用事务
    -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 启用Spring事务注解：
    在类或方法上使用 @Transactional -->
   <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- 手动配置事务通知属性 -->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">
        &lt;!&ndash; 定义事务传播属性(行为，有7种) &ndash;&gt;
        <tx:attributes>
            &lt;!&ndash;REQUIRED如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中&ndash;&gt;

            <tx:method name="*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>

    &lt;!&ndash; 配置事务切面 &ndash;&gt;
    <aop:config>
        <aop:pointcut id="serviceOperation" expression="execution(* com.zking.*.*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
    </aop:config>-->


    <!--	设置redis的数据源参数
        	设置redis数据库连接池的参数
    -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 控制一个pool最多有多少个状态为idle(空闲)的jedis实例 -->
        <property name="maxIdle" value="${redis.maxIdle}"></property>
        <!-- 控制一个pool可分配多少个jedis实例 -->
        <property name="maxTotal" value="${redis.maxActive}"></property>
        <!-- 表示当borrow一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException -->
        <property name="maxWaitMillis" value="${redis.maxWait}"></property>
        <!-- 在borrow一个jedis实例时，是否提前进行validate操作；如果为true，则得到的jedis实例均是可用的 -->
        <property name="testOnBorrow" value="${redis.testOnBorrow}"></property>
    </bean>


    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" destroy-method="destroy">
        <property name="poolConfig" ref="jedisPoolConfig"></property>
        <property name="hostName" value="${redis.host}"></property>
        <property name="port" value="${redis.port}"></property>
        <property name="timeout" value="${redis.timeout}"></property>
        <property name="usePool" value="${redis.usePool}"></property>
    </bean>


    <!--spring封装了 RedisTemplate对象来进行redis的各种操作，他支持所有的redis原生的api
        RedisTemplate位于spring-data-redis包下
    -->
    <bean id="jedisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"></property>
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
        <property name="enableTransactionSupport" value="true"></property>
    </bean>

    <!--1,shiro与Spring整合-->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!--2,securityManager-->
        <property name="securityManager" ref="securityManager"/>
        <!--使用shiro的内置过滤器拦截资源-->
        <property name="filterChainDefinitions">
            <value>
                /login.jsp=anon<!--界面放行-->
                /login=anon
                /**=anon <!--所有资源都要进行认证authc-->
            </value>
        </property>
        <!--修改shiro的默认登陆-->
        <property name="loginUrl" value="/login.jsp"/>
    </bean>

    <!--3,配置securityManager-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--4,关联realm(自定义的一个MyRealm类)-->
        <property name="realm" ref="myRealm"></property>

    </bean>

    <!--5,配置自定义Myrealm类-->
    <bean id="myRealm" class="com.zking.shiro.MyRealm">
    </bean>


    <!--配置multipartResolver(文件上传使用)-->
    <!--配置文件上传解析器-->
    <bean id="multipartResolver" 
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!--请求的编码-->
        <property name="defaultEncoding" value="UTF-8"></property>
        <!--设定文件上传的Max大小(字节)-->
        <property name="maxUploadSize" value="10485760"></property>
        <!--设定文件上传时写入内存的最大值，小于最大值将不会生成临时文件，默认10240-->
        <property name="maxInMemorySize" value="40960"></property>
        <!--延迟文件解析，以便捕获文件大小异常-->
        <property name="resolveLazily" value="true"></property>
        <!--指定上传文件的临时文件夹，请在项目中创建好目录-->
        <property name="uploadTempDir" value="images"></property>
    </bean>

</beans>